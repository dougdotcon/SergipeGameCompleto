#!/usr/bin/env python3
"""
Teste do sistema de configura√ß√µes do VIVA SERGIPE!
"""

import sys
import os

# Adiciona o diret√≥rio atual ao path para importar os m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_config_manager():
    """Testa o gerenciador de configura√ß√µes"""
    print("üß™ Testando Gerenciador de Configura√ß√µes...")
    print("=" * 50)

    try:
        from config_manager import get_config_manager

        # Obter inst√¢ncia do gerenciador
        config = get_config_manager()
        print("‚úÖ Gerenciador de configura√ß√µes carregado com sucesso!")

        # Testar carregamento de configura√ß√µes padr√£o
        print("\nüìã Configura√ß√µes atuais:")
        game_settings = config.get_game_settings()
        print(f"  ‚Ä¢ Dura√ß√£o: {game_settings['duration']} segundos")
        print(f"  ‚Ä¢ Meta: {game_settings['win_threshold']}%")
        print(f"  ‚Ä¢ Sensibilidade: {game_settings['min_body_pixels']} pixels")

        # Testar configura√ß√µes de √°udio
        print(f"  ‚Ä¢ Volume geral: {config.get('audio', 'master_volume', 0.7) * 100:.0f}%")
        print(f"  ‚Ä¢ Volume m√∫sica: {config.get('audio', 'music_volume', 0.5) * 100:.0f}%")

        # Testar altera√ß√£o de configura√ß√£o
        print("\nüîß Testando altera√ß√£o de configura√ß√µes...")
        original_duration = config.get('game', 'duration', 300)
        config.set('game', 'duration', 240, save=False)  # 4 minutos
        new_duration = config.get('game', 'duration', 300)

        if new_duration == 240:
            print("‚úÖ Altera√ß√£o de configura√ß√£o funcionou!")
        else:
            print("‚ùå Erro na altera√ß√£o de configura√ß√£o")

        # Restaurar valor original
        config.set('game', 'duration', original_duration, save=False)

        # Testar estat√≠sticas
        print("\nüìä Testando estat√≠sticas...")
        stats_before = config.get('stats', 'games_played', 0)
        config.update_stats(games_played=1, total_playtime=120.5)
        stats_after = config.get('stats', 'games_played', 0)

        if stats_after > stats_before:
            print("‚úÖ Atualiza√ß√£o de estat√≠sticas funcionou!")
        else:
            print("‚ùå Erro na atualiza√ß√£o de estat√≠sticas")

        print("\n‚úÖ Todos os testes do gerenciador passaram!")
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste do gerenciador: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_window():
    """Testa a janela de configura√ß√µes"""
    print("\nüñºÔ∏è Testando Janela de Configura√ß√µes...")
    print("=" * 50)

    try:
        from PyQt5.QtWidgets import QApplication
        from config_window import ConfigWindow

        # Verificar se j√° existe uma inst√¢ncia do QApplication
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)

        # Criar janela de configura√ß√µes
        window = ConfigWindow()
        print("‚úÖ Janela de configura√ß√µes criada com sucesso!")

        # Testar carregamento de configura√ß√µes
        window.load_current_settings()
        print("‚úÖ Configura√ß√µes carregadas na interface!")

        # Verificar se os controles foram preenchidos
        duration = window.duration_spinbox.value()
        threshold = window.threshold_spinbox.value()
        sensitivity = window.sensitivity_spinbox.value()

        print(f"  ‚Ä¢ Dura√ß√£o na interface: {duration} segundos")
        print(f"  ‚Ä¢ Meta na interface: {threshold}%")
        print(f"  ‚Ä¢ Sensibilidade na interface: {sensitivity} pixels")

        if duration > 0 and threshold > 0 and sensitivity > 0:
            print("‚úÖ Controles da interface preenchidos corretamente!")
        else:
            print("‚ùå Erro no preenchimento dos controles")

        # Fechar janela sem mostrar
        window.close()

        print("‚úÖ Teste da janela de configura√ß√µes passou!")
        return True

    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("Certifique-se de que PyQt5 est√° instalado:")
        print("pip install PyQt5")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste da janela: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration():
    """Testa a integra√ß√£o com o jogo principal"""
    print("\nüéÆ Testando Integra√ß√£o com o Jogo...")
    print("=" * 50)

    try:
        # Testar importa√ß√£o no sergipe_game.py
        import sergipe_game
        print("‚úÖ Integra√ß√£o com sergipe_game.py funcionou!")

        # Verificar se GAME_SETTINGS foi carregado
        if hasattr(sergipe_game, 'GAME_SETTINGS'):
            settings = sergipe_game.GAME_SETTINGS
            print(f"  ‚Ä¢ Configura√ß√µes carregadas no jogo:")
            print(f"    - Dura√ß√£o: {settings.get('duration', 'N/A')} segundos")
            print(f"    - Meta: {settings.get('win_threshold', 'N/A')}%")
            print(f"    - Sensibilidade: {settings.get('min_body_pixels', 'N/A')} pixels")
            print("‚úÖ GAME_SETTINGS carregado corretamente!")
        else:
            print("‚ùå GAME_SETTINGS n√£o encontrado")
            return False

        # Testar integra√ß√£o com menu
        try:
            import menu_gui
            print("‚úÖ Integra√ß√£o com menu_gui.py funcionou!")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso na integra√ß√£o com menu: {e}")

        print("‚úÖ Teste de integra√ß√£o passou!")
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste de integra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_file_operations():
    """Testa opera√ß√µes de arquivo"""
    print("\nüíæ Testando Opera√ß√µes de Arquivo...")
    print("=" * 50)

    try:
        from config_manager import ConfigManager

        # Criar gerenciador de teste
        test_config = ConfigManager("test_config.json")

        # Testar salvamento
        test_config.set('test', 'value', 'teste_123')
        print("‚úÖ Configura√ß√£o de teste salva!")

        # Criar novo gerenciador para testar carregamento
        test_config2 = ConfigManager("test_config.json")
        loaded_value = test_config2.get('test', 'value', 'default')

        if loaded_value == 'teste_123':
            print("‚úÖ Carregamento de arquivo funcionou!")
        else:
            print(f"‚ùå Erro no carregamento: esperado 'teste_123', obtido '{loaded_value}'")

        # Limpar arquivo de teste
        import os
        if os.path.exists("test_config.json"):
            os.remove("test_config.json")
            print("‚úÖ Arquivo de teste removido!")

        print("‚úÖ Teste de opera√ß√µes de arquivo passou!")
        return True

    except Exception as e:
        print(f"‚ùå Erro no teste de arquivo: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executa todos os testes"""
    print("TESTE COMPLETO DO SISTEMA DE CONFIGURACOES")
    print("=" * 60)

    tests = [
        ("Gerenciador de Configura√ß√µes", test_config_manager),
        ("Janela de Configura√ß√µes", test_config_window),
        ("Integra√ß√£o com o Jogo", test_integration),
        ("Opera√ß√µes de Arquivo", test_file_operations)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüîç Executando: {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")

    print("\n" + "=" * 60)
    print(f"üìä RESULTADO FINAL: {passed}/{total} testes passaram")

    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\n‚úÖ O sistema de configura√ß√µes est√° funcionando corretamente!")
        print("\nPara usar:")
        print("1. Execute: python sergipe_game.py")
        print("2. Clique em 'CONFIGURA√á√ïES' no menu")
        print("3. Ajuste as configura√ß√µes conforme desejado")
        print("4. Clique em 'Salvar'")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM!")
        print("Verifique os erros acima e corrija antes de usar o sistema.")

    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
